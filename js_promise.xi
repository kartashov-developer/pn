Promise @

. goto://js_promise_methods.js

Promise .
. Когда-то в будущем, это выполнится. Но, возможно, будет проблема.
  |{js}  
  | new Promise(executor)
. Объект Promise создается при помощи ключевого слова |new|.
  |new Promise| - конструктор для создания промиса.
  Executor .
  . Конструктор принимает в качестве аргумента функцию, которая называется
  `исполнителем`. |Executor| выполнится сразу, то есть еще до того, как
  конструктор вернет созданный объект. Эта функция, принимает в себя два колбэка
  в качестве параметров:
    # |resolve - успешное выполнение|.
    # !reject - отклоняет выполнение!.
    ! Порядок важен: сначала успешное выполнение, а потом ошибка.
  Промисификация .
  . Чтобы создать функцию, которая будет иметь функциональность промисов, нужно
  вернуть в ней объект Promise:
    |{js}  
    | function myAsyncFunction() {
    |   return new Promise((resolve, reject) => {})
    | }
  Теперь к этой функции могут быть применены методы промисов.
  Состояния .
  . Промис может находиться в трех состояниях:
    # ?ожидание(pending)?
      . Принимает данное состояние в момент создания.
    # |исполнено(fullfield)|
      . Принимает данное состояние при |успешном выполнении|(resolve).
      . При |fullfield| возвращает результат(значение).
    # !отклонено(rejected)!
      . Принимает данное состояние при !отклоненном выполнении!(reject).
      . При !rejected! возвращает причину отказа.
Методы .
  . Обработчики неявно возвращают новый промис, поэтому можно использовать
    методы друг за другом. Создается цепочка методов.
    |{js}  
    | promise.then().then().catch().finally();
  . Каждый |.then()| цепляется к предыдущему. !return! передает по цепочке
    данные.
  . Каждый метод возвращает новый промис.
    |then()| - обработка выполнения.
    !catch()! - обработка отказа.
    ?finally()? - обработка и выполнения, и отказа.
  Другие методы .
    all() .
    . Возвращает массив значений или первый отказ.
    race() .
    . Возвращает первое значение или первый отказ. Самое быстрое значение.
    any() .
    . Возвращает первое значение или массив с причинами отказа.
    allSettled() .
    . Дожидается всех операций и вернуть массив специальных объектов.
    . Подойдет, если нужно запросить несколько запросов, а потом перезапросить.

! Одна строка - !return! не нужен, фигурные скобки - нужен |return|.