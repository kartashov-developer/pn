Express @

. [http].
. [handlebars]. 
. [middleware].

Установка .
|{terminal} npm i express

Методы .
  get() .
  . Принимает 
  listen() .
  . Принимает {port} и {function}.
  . Начни работу сервера и жди, когда придут запросы/ответы.
  . Запускает сервер Express на текущем компьютере, используя порт portNumber.
    Сразу после успешного запуска сервера вызывает функцию.
  Способы ответа .
    send() .
    |{js}  
    | res.send(bufferOrTextOrArrayOrObject)
    . Задает значение одной из встроенных в Express переменных.
      Эти переменные позволяют настраивать Express для различных сценариев 
      использования. Есть предопредленные переменные, но можно использовать и 
      свои.
    . Преобразует переваемое значение. Строку в [HTML], объект в [JSON].
    json() .
    |{js}  
    | res.json(anyData)
    . Отправляет на клиент, в качестве ответа, преобразованный в строку,
      JSON-файл. Перед отправкой, метод автоматически вызывает для 
      передаваемых данных функцию |JSON.stringify()|.
    status() .
    |{js}  
    | res.status(responseStatusCode);
    | res.status(404);
    . Задает последующему ответу числовой код статуса.
    redirect() .
    |{js}  
    | res.redirect(responseStatusCode, path);
    | res.redirect(302, 'https:localhost:3000/path/name/');
    . Отправляет клиенту ответ с кодом статуса responseStatusCode и 
      требованием сделать новый запрос на адрес, указанный в path.
    render() .
    |{js}  
    | res.render(viewName, viewsParameters);
    . Принимает {viewName (имя файла)}, {viewsParameters (объект)}.
    . Преобразовывет <view-файл> с именем viewName.* шаблонизатора в   
      HTML-страницу и отправляет ее в виде текста на клиент.
    end() .
    |{js}  
    | res.end();
    . Отправляет ответ на клиент в том виде, в каком он сущетсвует на текущий
      момент.
    . Отсылает ответ без содержимого. То есть не нужен HTML.
    . Имеет смысл, если идет общение между серверами.
  Обработчики HTTP-запросов .
    . Сюда входят: `.get()`, `.post()`, `.put()`, `.delete()` и т.п..
    . Каждая callback-функция принимает в себя от |2| до |4| параметров. Имена 
      параметров имеют устоявшуюся конвенцию:
      # |err(ошибка)| - объект, содержащий в себе информацию об ошибке, если 
      она произошла.
      # |req(запрос)| - объект, содержащий в себе информацию о HTTP-запросе, 
        направленном с клиента.
      # |res(ответ)| - объект, позволяющий добавлять/удалять/редактировать 
        информацию, которую сервер отправит клиенту в ответ на его запрос.
      # |next(следующий)| - функция, вызов которой не завершает обработку 
        полученного запроса(т.е. не отправляет ответ на клиент), а передает 
        запрос на обработку следующему подходящему обработчику.
        . Может использоваться, когда приходит запрос, но нам нужно лишо 
          выполнить код и не отвечать на него.
        . Эта функция исполняет [middleware]-систему.
        . При использовании последующие запросы будут принимать те же |req| и 
          |res|, что и нынешний.
    ! Параметры меняют свое местоположение:
      - ?2параметра: req, res?
      - ?3параметра: req, res, next?
      - ?4параметра: err, req, res, next?
    use() .
    | app.use('routeName', httpRequestHandlerCallback);
    . Заменяет методы все другие методы.
    . Отрабатывает всегда.
    . Используется в связке с [middleware].
    . В случае, если адрес запроса совпадает с |routeName|, запускает функцию 
      |httpRequestHandlerCallback|(обработки входящего HTTP-запроса). И, если
      тип запроса совпадает с одним из существующи>>х.
    . |routeName| может быть точным адресом, может быть пустой строкой, 
      а может быть |*|(любой адрес).

Логирование .
  . Логгер - программа, которая отслеживает все события и записывает их в 
    логе(журнале событий).
  . Могут записывать данные в файлы, базы данных, выводить данные в консоль.
  . Можно указывать степень/уровень логирования.
  . ?Дата/время? |:| {Что произошло}
  Логгер morgan .
  . Выводит события в консоль.
  . Пример ответа со степенью |dev|: 
    |GET| ?/another/good? ^304^ 3.852 ms - -
  |{terminal}  
  | npm i morgan
  |{js}  
  | const morgan = require('morgan');
  | app.use(morgan('dev')); // dev - степерь логгирования

  Пример .
  | const express = require('express')
  | const app = express();
  | const port = 3000;
  | app.get('/', (req, res) => {
  |   res.send('Hi!');
  | });
  | app.listen(port, () => {
  |   console.log(`The server is started on port: ${port}`);
  | })
  ! Переменная окружения.
  | const PORT = process.env.PORT ?? 3000;

References @
DONE:[ELB#] [https://www.youtube.com/watch?v=5a3thjSWbxs&list=PL8NGcSL3ZP-_OVaarWZPm5TX6xik2cnZm&index=13]
DONE:[ELB#] [https://www.youtube.com/watch?v=BRDGgknYSNM&list=PL8NGcSL3ZP--Il0-w5Q20nTSMv3hUrvoe&index=16]
TODO:[Express#] [https://www.youtube.com/playlist?list=PL0lO_mIqDDFX0qH9w5YQIDV6Wxy0oawet]
[http-statuses#] [https://httpstatuses.com]
