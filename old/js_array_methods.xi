[js] @

[#.push()]
[#.pop()]
[#.shift()]
[#.unshift()]
[#.split()]
[#.join()]
[#.splice()]
[#.slice()]
[#.sort()]
[#.reverse()]
[#.concat()]
[#.forEach()]
[#.map()]
[#.filter()]
[#.reduce()]

Методы .
  [.push()#] .
  . Добавляет элементы в конец массива.
  . Принимает <элементы>,
    возвращает <длину нового массива>.
  . Изначальный массив |изменяется| / |мутирует|.
  | const arr = [1, 2, 3];
  | const pushMethod = arr.push(4);
  | console.log(pushMethod); // 4
  | console.log(arr); // [1, 2, 3, 4]
  [.pop()#] .
  . Удаляет последний элемент из массива.
  . Принимает <ничего не принимает>,
    возвращает <удаляемый элемент из массива>.
  . Изначальный массив |изменяется| / |мутирует|.
  | const arrPoP = [1, 2, 3];
  | const popMethod = arrPoP.pop();
  | console.log(popMethod); // 3
  | console.log(arrPoP); // [1, 2]
  [.shift()#] .
  . Удаляет первый элемент.
  . Принимает <ничего не принимает>,
    возвращает <удаляемый элемент>.
  . Изначальный массив |изменяется| / |мутирует|.
  | const arrShift = [1, 2, 3];
  | const shiftMethod = arrShift.shift();
  | console.log(arrShift); // [2, 3]
  | console.log(shiftMethod); // 1
  [.unshift()#] .
  . Добавляет элементы в начало массива.
  . Принимает <элементы>,
    возвращает <длину нового массива>.
  . Изначальный массив |изменяется| / |мутирует|.
  | const arrUnshift = [1, 2, 3];
  | const UnshiftMethod = arrUnshift.unshift(0);
  | console.log(arrUnshift); // [0, 1, 2, 3]
  | console.log(UnshiftMethod); // 4
  [.split()#] .
  . Превращает строку в массив.
  . Принимает {разделитель(может быть пустой строкой|пробелом|запятой)}
    возвращает <новый массив>.
  . Изначальный массив <не изменяется>. Создает новый массив.
  | const stringSplit = "This,is,some,string";
  | const array = stringSplit.split(',');
  | console.log(array); // [ 'This', 'is', 'some', 'string' ]
  [.join()#] .
  . Превращает массив в строку.
  . Принимает <разделитель>,
    возвращает <строка>.
  . Изначальный массив <не изменяется>.
  | const arrJoin = ['My', 123, 'name', 13, true, 'is Vyacheslav.'];
  | const stringJoin = arrJoin.join('|');
  | console.log(stringJoin); // My|123|name|13|true|is|Vyacheslav.
  . Изначальный массив |меняется| - к нему добавляются указанные элементы.
  [.splice()#] .
  . Удалить/добавить элементы.
  . Принимает `3` аргумента.
    Первый: {индекс(после которого начинает удаление) обязательный},
    второй: {количество удаляемых элементов, необязательный},
    третий: {на что заменить, необязательный}
    возвращает <новый массив, содержащие удаленные элементы>.
  . Изначальный массив |изменяется|.
  | const arrSplice = ["Имя", "Фамилия", "Отчество"];
  | const spliceMethod = arrSplice.splice(0, 3, "Юлия", "Кашко", "Максимовна");
  | console.log(spliceMethod); // [ 'Имя', 'Фамилия', 'Отчество' ]
  | console.log(arrSplice); // [ 'Юлия', 'Кашко', 'Максимовна' ]
  [.slice()#] .
  . Копирует часть массива.
  . Принимает `2` аргумента.
    Первый: {начальный индекс(не включительно)},
    второй: {конечный индекс(не включительно)}
    возвращает <новый массив, содержащие удаленные элементы>..
  . Изначальный массив <не изменяется>. Создает новый массив.
  | const arrSlice = ['Банан', 'Апельсин', 'Лимон', 'Яблоко', 'Манго'];
  | const sliceMethod = arrSlice.slice(1, 3);
  | console.log(sliceMethod); // ['Апельсин', 'Лимон']
  [.reverse()#] .
  . Меняет порядок элементов на обратный.
  . <Ничего не принимает>,
    возвращает <новый перевернутый массив>.
  . Изначальный массив |изменяется|. Создает новый массив.
  | const arrReverse = ['one', 'two', 'three'];
  | const reverseMethod = arrReverse.reverse();
  | console.log(arrReverse); // [ 'three', 'two', 'one' ]
  | console.log(reverseMethod); // [ 'three', 'two', 'one' ]
  [.concat()#] .
  . Соединяет массивы.
  . Принимает <массив>,
    возвращает <новый соединенный массив>.
  . Изначальный массив |изменяется|.
  | let arr = [1, 2];
  | let arr1 = [3, 4];
  | let arr2 = [7, 8];
  | const arr3 = arr.concat(arr1, [5, 6], arr2);
  | console.log(arr3); // > Array [1, 2, 3, 4, 5, 6, 7, 8]
  [.indexOf()#] .
  . Находит индекс первого найденного элемента или -1, если значения нет.
  . Принимает ?искомый элемент?.
  | let arr = ['Война и мир',
  | 'Москва не сразу строилась',
  | 'Так говорил Заратустра'];
  | arr.indexOf('Так говорил Заратустра'); // 2
  | arr.indexOf('Мертвые души'); // -1, искомый элемент отсутствует
Методы перебора .
  [.forEach()#] .
  . Выполняет указанную ф-ию один раз для каждого элемента.
  . Принимает {callback}, который состоит из:
    {элемент(текущий обрабатываемый элемент в массиве) обязательный},
    {индекс(индекс текущего элемента) необязательный},
    {массив(который используется) необязательный}.
  | const arr1 = [2, 3, 6, 8, 10];
  | arr1.forEach((el, i, arr) => {
  |   console.log("(.forEach())", `${i}: ${e}l внутри массива ${arr}.`);
  | });
  | // 2 внутри массива 2,3,6,8,10 ...
  [.map()#] .
  . Применяет функцию к каждому элементу массива.
  . Принимает {callback}, который состоит из:
    {элемент(текущий обрабатываемый элемент в массиве) обязательный},
    {индекс(индекс текущего элемента) необязательный},
    {массив(который используется) необязательный}.
    возвращает `новый массив`.
  . Изначальный массив <не изменяется>. Создает новый массив.
  | const numbers = [1, 4, 9];
  | const roots = numbers.map(Math.sqrt);
  | console.log(numbers); // [1, 4, 9]
  | console.log(roots); // [1, 2, 3]
  [.filter()#] .
  . Проверяет массив проверкой и создает новый массив из прошедших эту проверку.
  . Принимает {callback}, который состоит из:
    {элемент(текущий обрабатываемый элемент в массиве) обязательный},
    {индекс(индекс текущего элемента) необязательный},
    {массив(который используется) необязательный}.
    возвращает `новый массив`.
  . Изначальный массив <не изменяется>. Создает новый массив.
  [.reduce()#] .
  . Применяет функцию reducer к каждому элементу массива, возвращая одно результирующее значение.
  . Принимает {callback}, который состоит из:
    {аккумулятор(получаемое значение после каждого выполнения callback) обязательный},
    {элемент(текущий обрабатываемый элемент в массиве) обязательный},
    {индекс(индекс текущего элемента) необязательный},
    {массив(который используется) необязательный}.
    Массив <не изменяется>.



