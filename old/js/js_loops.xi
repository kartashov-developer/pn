[js] @

while .
| while(condition) {}
. Пока |condition| истинно, цикл while будет выполняться.

for .
. | for (начало; условие; шаг) {}
начало - выполняется один раз при входе в цикл
условие - проверяется перед каждой итерацией
тело - выполняется снова и снова, пока условие не станет |{js}true|.
шаг - выполняется после тела цикла перед проверкой условия

switch .
. Имеет один или более блок |case| и необязательный блок |default|.
! Значения должны быть одного типа.
|{js}
| let a = 2 + 2;
| switch (a) {
|  case 3:
|    alert( 'Маловато' );
|    break;
|  case 4:
|    alert( 'В точку!' );
|    break;
|  case 5:
|    alert( 'Перебор' );
|    break;
|  default: // будет выведен, если case не нашел число
|    alert( "Нет таких значений" );
| }
Вложенные циклы .
  Пример 1 .
  | for (let i = 0; i < 3; i++) {
  |   // cycle1
  |   console.log(i);
  |   for (let j = 0; j < 3; j++) {
  |     // cycle2
  |     console.log(j);
  |   }
  | }
  | Output: 0[1] 0[2] 1[3] 2[4] 1[5] 0[6] 1[7] 2[8] 2[9] 0[10] 1[11] 2[12]
  [1] |i| = 0; (|cycle1|) => Output: 0
  [2] |i| = 0; <j> = 0; <cycle2>) => Output: 0
  [3] |i| = 0; <j> = 1; <cycle2>) => Output: 1
  [4] |i| = 0; <j> = 2; <cycle2>) => Output: 2
  => <j> не может быть равно 3, по условию(<j> < 3) - выходим из <cycle2>
  [5] |i| = 1; (|cycle1|) => Output: 1
  [6] |i| = 1; <j> = 0; (<cycle2>) => Output: 0
  [7] |i| = 1; <j> = 1; (<cycle2>) => Output: 1
  [8] |i| = 1; <j> = 2; (<cycle2>) => Output: 2
  => <j> не может быть равно 3, по условию(<j> < 3) - выходим из <cycle2>
  [9] |i| = 2; (|cycle1|) => Output: 2
  [10] |i| = 2; <j> = 0; (<cycle2>) => Output: 0
  [11] |i| = 2; <j> = 1; (<cycle2>) => Output: 1
  [12] |i| = 2; <j> = 2; (<cycle2>) => Output: 2
  => <j> не может быть равно 3, по условию(<j> < 3) - выходим из <cycle2>
  => |i| не может быть равно 3, по условию(|i| < 3) - выходим из |cycle1|
  Пример 2. Задача 1 .
  | *
  | **
  | ***
  | ****
  | *****
    Решение .
    | let result = "";
    | const length = 7;
    | for (let i = 1; i < length; i++) {
    |   // Icycle
    |   for (let j = 0; j < i; j++) {
    |     // Jcycle
    |     result += "*";
    |   }
    |   result += "\n";
    |   i;
    | }
    | console.log(result);
    Разбор .
    . {result} - пустая строка, в которую все будет складываться.
    . {result += '\n';} - перенос строки, который будет происходить каждый раз при выходе из <Jcycle>.
    . ?(j < i)? - каждый раз, когда строка переходит, мы должны увеличивать количество звездочек, которые туда попадут.
    ! Переменная result обновляется после каждого нового изменения в условии |Icycle|.
    ! |i| стало 1? => |{js}result = ''|.
    ! |i| стало 2? => |{js}result = ''|.
    # {Итерация 1} Входим в цикл |Icycle|. |i| = 1. Входим в цикл <Jcycle>. <j> = 0.  <j(0)> < |i(1)| = true.
    | result = '' + '*' => '*'.
    Что дальше? Продолжаем итерации в цикле <Jcycle>, но по условию <j> уже равно 1 и <j(1)> < |i(1)|.
    Не подходит => выходим из цикла.
    Входим в тело цикла |Icycle|.
    | result = '*' + '\n'(перенос строки) => * с переносом на следующую строчку.
    {Итерация 2} Цикл прогнан, теперь в |Icycle| увеличиваем |i|. |i| = 2. Входим в цикл <Jcycle>. <j> = |0|. <j(0)> < |i(2)| = true.
    | result = '' + '*' => '*'.
    Что дальше? Продолжаем итерации в цикле <Jcycle> и по условию видим, что
    <j> увеличилось на 1. <j(1)> < |i(2)|. Подходит => продолжаем <Jcycle>.
    | result = '*' + '*' => '**'.
    Что дальше? Продолжаем итерации в цикле <Jcycle>, но по условию <j> увеличилось на 1
    и стало равно 2. <j(2)> < |i(2)|.
    Не подходит => выходим из цикла.
    Входим в тело цикла |Icycle|.
    | result = '**' + '\n'(перенос строки) => ** с переносом на следующую строчку.
  Пример 3. Задача 2 .
  |      *
  |     ***
  |    *****
  |   *******
  |  *********
  | ***********
    Решение .
    |{js}
    | const lines = 5;
    | let mainString = "";
    | for (let i = 0; i < 6; i++) {
    |   // Icycle
    |   for (let j = 0; j < lines - i; j++) {
    |     // Jcycle1
    |     mainString += "_";
    |   }
    |   for (let j = 0; j < 2 * i + 1; j++) {
    |     // Jcycle2
    |     mainString += "*";
    |   }
    |   mainString += "\n";
    | }
    | console.log(mainString);
    Разбор .
    |asdf sdf| |asdf sdf|
    s?sdf!
    <Jcycle2>. (<j> < 2 * |i| + 1): |i = 1|:?0 < 1?, |i = 2|:?0 < 3?, |i = 3|:?0 < 5?, |i = 4|:?0 < 7?
    # {Итерация 1} Входим в |Icycle|. |i| = 0; 0 < 6.
    Входим в <Jcycle1>. <j> = 0; 0 < 5 - |i(0)|.
    В теле цикла видим: mainString = '' + '_' = '_'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 1; 1 < 5 - |i(0)|. Повторяем.
    mainString = '_' + '_' = '__'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 2; 2 < 5 - |i(0)|. Повторяем.
    mainString = '__' + '_' = '___'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 3; 3 < 5 - |i(0)|. Повторяем.
    mainString = '___' + '_' = '____'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 4; 4 < 5 - |i(0)|. Повторяем.
    mainString = '____' + '_' = '_____'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 5; 5 < 5 - |i(0)|. Выходим.
    Входим в ?Jcycle2?. <j> = 0; 0 < 2 * 0 + 1; 0 < 1.
    mainString = '_____' + '*' = '_____*'
    # {Итерация 2} Входим в |Icycle|. |i| = 1; 1 < 6.
    Входим в <Jcycle1>. <j> = 0; 0 < 5 - |i(1)| = 0 < 4.
    В теле цикла видим: mainString = '' + '_' = '_'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 1; 1 < 5 - |i(1)| = 1 < 4. Повторяем.
    mainString = '_' + '_' = '__'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 2; 2 < 5 - |i(1)| = 1 < 4. Повторяем.
    mainString = '__' + '_' = '___'. Пытаемся выйти из <Jcycle1>, обновляя <j> = 3; 3 < 5 - |i(1)| = 1 < 4. Повторяем.
    Входим в ?Jcycle2?. <j> = 0; 0 < 2 * 1 + 1; 0 < 3.
    <j> = 0. mainString = '___' + '*' = '___*';
    <j> = 1. mainString = '___*' + '*' = '___**';
    <j> = 2. mainString = '___**' + '*' = '___***';
  Пример 4. Задача 3 .
    | 111222333444555666777888999
    Решение .
    | let string = "";
    | let number = 1;
    | for (let i = 0; i < 9; i++) {
    |   for (let j = 0; j < 3; j++) {
    |     string += number;
    |   }
    |   number++;
    | }
    | console.log(string);
    Разбор .
    . |string| - пустая строка для сложения получившихся результатов из <Jcycle>.
      |number| - начинается с 1 => number = 1. Нужна, чтобы каждый раз при выходе из <Jcycle>, увеличивать переменную на 1, с помощью |Icycle| и прибавлять к полученной уже строке, новые цифры.

    # {Итерация 1} 111
    Входим в |Icycle|: |i| = 0; 0 < 9.
    Входим в <Jcycle>: <j> = 0; 0 < 3.
    number = 1;
    string = '' + number = '' + 1 = 1.
    <j> = 1; 1 < 3 => Продолжаем работу в <Jcycle>.
    string = '1' + number = '1' + 1 = '11'.
    <j> = 2; 2 < 3 => Продолжаем работу в <Jcycle>.
    string = '11' + number = '11' + 1 = '111'.
    <j> = 3; 3 < 3 => Выходим из <Jcycle>.

    Попадаем в тело |Icycle| и видим, что переменная number должна быть увеличена на 1 => number = 2.
    В |Icycle| обновляем шаг и теперь |i| = 1; 1 < 9.
    И входим в <Jcycle>...
    # {Итерация ...}
  Пример 5. Задача 4 .
  | 10x01x
  | 10x01x
  | 10x01x
    Решение .
    | let resultik = "";
    | for (let i = 0; i < 3; i++) {
    |   for (let j = 1; j <= 6; j++) {
    |     if (j % 2 == 0) {
    |       resultik += 0;
    |     } else if (j === 3 || j === 6) {
    |       resultik += "x";
    |     } else if (j === 1 || j === 5) {
    |       resultik += 1;
    |     }
    |   }
    |   resultik += "\n";
    | }
    | console.log(resultik);
  Пример 6. Задача 5 .
  | a/a4/4a
    Решение .
    | let superMain = "";
    | for (let i = 0; i < 4; i++) {
    |   for (let j = 1; j <= 7; j++) {
    |     if (j === 1 || j === 3 || j === 7) {
    |       superMain += "a";
    |     } else if (j === 4 || j === 6) {
    |       superMain += "4";
    |     } else if (j === 2 || j === 5) {
    |       superMain += "/";
    |     }
    |   }
    |   superMain += "\n";
    | }
    | console.log(superMain);
  Пример 7. Задача 6 .
  <Не решено>
  | 11 12 13 21 22 23 31 32 33
