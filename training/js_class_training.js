/* 1. Создайте класс BankAccount с методами deposit(amount), withdraw(amount)
и getBalance(). Класс BankAccount должен иметь свойство transactions,
которое хранит историю транзакций (пополнение и снятие денег).
Метод deposit() должен добавлять запись о пополнении в историю транзакций,
метод withdraw() должен добавлять запись о снятии денег, и метод getBalance()
должен возвращать текущий баланс счета. Создайте экземпляр класса
BankAccount, выполните несколько операций пополнения и снятия денег
и выведите историю транзакций. */

/*Создайте класс LinkedList, который представляет связанный список.
Реализуйте методы add(value) для добавления элемента в конец списка,
remove(value) для удаления элемента из списка и
contains(value) для проверки наличия элемента в списке. */

/* Создайте класс BinarySearchTree, который представляет двоичное дерево поиска.
Реализуйте методы insert(value) для вставки элемента в дерево,
search(value) для поиска элемента в дереве и
remove(value) для удаления элемента из дерева. */

/* Создайте класс Person с методами walk() и talk(). Создайте класс Student,
который композирует Person и добавляет метод study(). Затем создайте класс
Athlete, который также композирует Person и добавляет метод train(). Наконец,
создайте класс SportsStudent, который наследует и композирует Student и Athlete,
чтобы иметь возможность учиться и тренироваться. */

/* Создайте класс Counter, который имеет свойство count и метод increment(),
который увеличивает значение count на 1. Используйте стрелочную функцию
для определения метода increment(), чтобы избежать потери контекста выполнения
при передаче метода increment() в другую функцию. */

/* Реализуйте класс Queue, который представляет очередь (первым пришел - первым вышел).
Реализуйте методы enqueue(value) для добавления элемента в очередь,
dequeue() для удаления и возврата первого элемента очереди, и
isEmpty() для проверки, пуста ли очередь. */

/*Асинхронность и коллбэки:
Создайте класс FileReader, который имеет метод readFile(), который
принимает путь к файлу и коллбэк. Внутри метода readFile(), используйте
асинхронный API для чтения файла и передайте содержимое файла в коллбэк
для обработки.  */


/*Реализуйте класс Stack, который представляет стек (последним пришел - первым вышел).
Реализуйте методы push(value) для добавления элемента в стек,
pop() для удаления и возврата верхнего элемента стека, и
isEmpty() для проверки, пуст ли стек. */

/* Создайте класс HashTable, который представляет хэш-таблицу.
Реализуйте методы put(key, value) для добавления элемента в хэш-таблицу,
get(key) для получения значения элемента по ключу, и
remove(key) для удаления элемента из хэш-таблицы. */


// ООП Принципы.
// Прототипы.
// Сайт Freshnese.
// MobX state-manager
