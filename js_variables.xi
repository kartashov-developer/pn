[js]

. [js_var]
. [js_let]
. [js_const]

Переменные .
. Переменная - именованное хранилище данных.
  Создается с помощью ключевых слов:
  # |var| [js_var]
  # |let| [js_let] - можно изменить
  # |const| [js_const] - нельзя изменить
  Название переменных .
  . Переменные могут иметь только `буквы`, `цифры`, `$`, `_`.
  . Первый символ не должен быть цифрой.
  . Регистр важен: переменные с именами |apple| & |APPLE| - разные.
  . Зарезервированы слова: |let|, |class|, |return|, |function|.
. Повторное объявление вызывает ошибку.
|{js}
| let name = "State";
| let name = "Main"; >>> Ошибка, две переменных с одним именем.

  const .
  . Константа(неизменяемая переменная).
    |{js}
    | const MY_NAME = "Vyacheslav";
    | MY_NAME = "Maksim"; >>> Ошибка, константу нельзя переписать
    const имя_переменной .
    . Константы, которые `жестко закодированы`, следует объявлять в верхнем регистре.
      |{js}
      | const COLOR_RED = "#FF0000";
      | const API = "docs.google.com";
    ! Прямых констант в JS нет, так, как:
    |{js}
    | const object = { a: 10 };
    | object.a = 20;
    | console.log(object.a); // 20

  var VS let VS const .
  # Для |var| не существует `блочной области видимости`.
    |{js}
    | if (true) {
    |   var test = true;
    | }
    | alert(test); // Переменная существует вне блока, она стала глобальной.
    Если же использовать |let| || |const|, то:
    |{js}
    | if (true) {
    |   let test = true;
    | }
    | alert(test); // >>> Error: test in not defined
  # |var| допускает повторное объявление переменной.
    |{js}
    | var firstName = "Masha";
    | var firstName = "Nastya"; >>> Ошибки нет, примет значение ниже
    | let surName = "Maksimov";
    | let surName = "Fioletov"; >>> Ошибка
  # |var| обрабатывается в начале запуска функции.
    ! Существует до того, как была объявлена.
    . Переменные, объявленные с помощью ключевого слова |var| выходят за пределы нынешней области видимости и,
      попадают(если лежат в обычной функции, а не во вложенной) в глобальную область видимости. Тем самым,
      они считаются объявленными с самого начала исполнения и это не зависит от того, в каком месте реально находятся
      их объявления.
      Это поведение называется [js_Hoisting](всплытие), потому что все объявления всплывают на самый верх ф-ии.

Как называть переменные .
. Использовать:
  |camelCase| - для всего
  или
  |UPPER_SNAKE_CASE| - для констант.
