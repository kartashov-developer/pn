HTTP @

. [express].
. [handlebars]. 
. [middleware].
. [#http-statuses].

HTTP .
. HyperText Transfer Protocol - текстовый протокол, разработанный для передачи 
  HTML.
  . |HTTPS| - HyperText Transfer Protocol Security.
. HTTP входит в состав прикладного уровная стека [TCP/IP](сетевая модель 
  передачи данных). На стеке этих протоколов построено все взаимодействие 
  пользователей в IP-сетях.
  . интернет-браузер HTTP/HTTPS: порты `80/443`
  . FTP-клиент для протокола FTP: порты `20/21`
  . почтовая программа для протокола SMTP: `порт 25`
  . SSH для безопасного соединения с удаленной машиной: `порт 22`
  Версии .
  . Версии HTTP/0.9, HTTP/1.0, HTTP/1.1 - текстовые протоколы.
  . Версии HTTP/2 и HTTP/3 - бинарные.
  Что такое протокол? .
  . ?Протокол? - договоренность о том как, когда, в каком порядке и какие 
    данные отправлять и принимать. А также о том, как отвечать на полученные 
    данные.
  Протокол HTTP .
  . Клиент - программа, которая отправляет запросы.
  . Сообщение от клиента называется |запросом|, |HTTP-request|.
  . Сервер - программа, которая принимает ответы.
  . Сообщение от сервера называется |ответом|, |HTTP-response|.
  . |HTTP-сообщения| - это обмен данными между сервером и клиентом.
    Connectionless .
    # устанавливается соединение между клиентом и сервером.
    # отправляется запрос.
    # соединение закрывается.
    Stateless .
    . Ни клиент, ни сервер не хранят никакой информации о состоянии друг 
      друга. После того, как соединение между ними разорвано, клиент и сервер 
      не знают друг о друге ничего и последующие соединения происходят, как в 
      первый раз.
  HTTP Message .
  . Состоит из |3| разделов, каждый из которых, содержит данные в виде текста,
  `кроме body`, которые также может содержать двоичные данные.
    1. |Request line| - предоставляет информацию о запросе и ответе.
        |#1.| Метод HTTP(GET, PUT, POST и т.д.)
        |#2.| Цель запроса(обычно URL, путь, порт)
        |#3.| Версия HTTP, которая предполагается использоваться для ответа
    2. !Headers! - набор строк ключ-значение, как предопределенных, так и 
       кастомных.
        !#1. General headers(Основные заголовки)!
          Относятся к сообщению в целом.
        !#2. Request headers(Заголовки запроса)!
          Уточняющие запрос(например, User-Agent, Accept-Type);
        !#3. Заголовки сущности!
          Относятся к телу сообщения(например, Content-Length). Данные 
          заголовки отсутствуют, если у запроса нет тела.
    3. ?Body? - произвольные данные, которые можно передать с клиента на 
       сервер. 
        . Тело бывает не у всех запросов: запросы, собирающие(fetching) 
          ресурсы(GET, HEAD, DELETE, OPTIONS), в нем обычно не нуждаются.
          А вот метод |POST|, которые отправляет данные на сервер для 
          обновления.
        . Почти всегда текст. Картинку передается с помощью `сериализации`.
    Пример .
      Запрос .
      |Request line:|    |GET /news HTTP/1.0|
      !Headers:!         !Host!: www.ya.ru
                         !Accept!: text/html
                         !Accept-language!: ru-ru
      ?Body:?            ?Login?: SkyNet999
      Ответ .
      |Request line:|   |HTTP/1.0 200|
      !Headers!:        !Host!: www.ya.ru
                        !Accept!: text/html
                        !Accept-language!: ru-ru
                        !Content-Type!: text/html, charset="UTF-8"
      ?Body?:           ?isLoginSuccessfull?: true
  URL .
  . Uniform Resource Locator.
  . URL, по сути, это локатор, который передает информацию.
  . !https://www.example.com:1234/forum/questions?showResp=1&path=no#top!
    - protocol/протокол: !http!
    - host/хост: !www.example.com!
    - port/порт: !:1234!
      . Если порта нет, то он дефолтный:
        # для HTTP: |80|;
        # для HTTPS: |443|.
    - path/путь: !/forum/questions/!
    - query: !showResp=1&path=no!
    - fragment: !#top!
    URI .
    . [URI#] Uniform Resource Indetifier.
    . URI, по сути, это айдишник.
    . Каждый |URL| - это |URI|, но не наоборот.
    . Любой |URI|, в котором указан протокол это |URL|:(http, ftp, mailto...).
  HTTP Request Methods .
  HTTP Методы .
  . |GET| - запрос на получение данных.
    ! В |GET| ?Body? отсутствует.
  . |POST| - запрос на добавление данных.
  . |PUT| - запрос на создание/обновление/замену данных.
  . |DELETE| - запрос на удаление данных.
  Код статус .
  . [#http-statuses]
  . На запрос с клиента, сервер посылает клиенту ответ, в котором, указывает
    числовой код статуса обработки запроса. Коды делятся на 5 категорий:
    # `1xx` - информационные сообщение. Сообщает, что запрос получен.
    # `2xx` - сообщения об успехе запрашиваемой операции.
    # `3xx` - сообщения о переадресации. Для успешного завершения операции 
      требуются дополнительные действия.
    # `4xx` - ошибка на стороне клиента(не может быть обработан или не 
      соответсвует стандартам).

    # `5xx` - ошибка на стороне сервера. По какой-то причине сервер не смог 
      обработать запрос.

References @
[http-statuses#] [https://httpstatuses.com]
